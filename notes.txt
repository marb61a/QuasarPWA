Quasar Framework
    - https://quasar.dev/
    - VueJS based
    - A single codebase can be deployed to multiple platforms

Running the project
    - cd into the project folder
    - To run the project
        - At the cli enter -- quasar dev
        - By default this is ran in SPA mode
    - To run the project in PWA mode
        - quasar dev -m pwa
        - This mode will interfere with Hot Relaoding and other items
            - This is down to doing stuff like caching
        - It may be better to develop in standard SPA mode until adding PWA items

Folder Structure
    - /src folder will be the main folder that concerns
    - The index.template.html file is the main html file
    - The q-app div will be where the main Vue component will be loaded
    - MainLayout.vue in layouts folder in the main layout for the app
        - Within layouts pages are loaded
        - This will be in the <router-view />
    - The assets folder holds items such as images
        - Anything in this folder will be processed by Webpack
    - Boot files allow for code to be initialised prior to app starting
        - This can be beneficial for plugins
        - There is an axios.js boot file created by default
            - Axios will be used during the project
    - CSS folder will hold css depending on what options where chosen in setup
    - There was a /src/statics folder this has been replaced by /public folder
        - Assets can be added here to but will only be loaded not processed by Webpack

Install Vue devtools on Chrome

Vue.js should be understood prior (at least the basics) 

Drawer component
    - q-drawer can be removed from layout
    - This is because a header and footer will be added
    - Sample code for components eg footer can be gotten from the Quasar site

Adding header and footer
    - Adding tabs -> In layoput q-tab will be inside q-tabs
    - To add to Vue router change q-tab to q-route-tab 
    - Then simply add a to directive along with the path wanted
    - The footer will be for the mobile view of the app

Adding Style
    - Removing the elevated property will remove the shadow
    - Add a background colour using bg-<colour>
    - Change text colour using class text-<colour>
    - Using the component API on the Quasar site will show available properties
    - To add a border add a bordered property
    - To differentiate active tab add active-colour property to q-tabs
    - To remove line indicating active tab use the indicator-color and set to transparent

Changing Icons
    - By default Quasar uses Material Icons
    - Project will use Eva Icons
        - https://akveo.github.io/eva-icons/#/
    - Adding libraries will be done in the quasar.conf.js file
    - eva-icons should already be present
        - If not then add in the extras section
    - To use eva icons use eva-<icon name> property
    - Name props can be removed from route tabs as they are for a content pane which is not being used
    - Labels can also be removed
    - To enlargen icons sizes use q-tab__icon
        - This will mean adding a style section to the main layout file

Header Styles
    - q-button can be removed as the drawer has made it redundant
    - Quasar version number div can also be removed
    - Text can be centered using the text-center property
        - This will only work on desktops so using CSS will be better in this case
    - The q-toolbar__title property will need to be adjusted
    - This will be done using the text-align: center 

Using custom font
    -  Using Google Fonts and the Grand Hotel font
        - https://fonts.google.com/specimen/Grand+Hotel
    - Add the link to the indxe.template.html page
    - Then add a global css class to enable components to use the style

Hide footer
    - For when larger displays are used (desktop)
    - Quasar has breakpoint variables that can be used
    - xs will be used as it covers up to 599px wide which should cover all mobile devices
    - Many items will be hidden or rearranged on larger devices so global classes should be setup

Navigation items
    - Again for larger displays
    - App will use buttons (flat round in this case)
    - Dense attribute will reduce padding around an icon
    - directive order does matter and will affect rendering!!

Make header better for desktops
    - Just applies when using desktop
    - There is a separator component available for visually separating components 
        - These are both vertical and horizontal
    - Create a constrain class to prevent icons going to the far sides of a page (max-width)

Creating Page content
    - Use the constrain class to keep content centered on large screens
    - Quasar has a built in padding directive : q-pa

Create a list of posts
    - Use the q-card component (flat-bordered)
    - There are templates available on the Quasar site
    - Gravatar or other imagehosts can be used to host avatar image
    - q-img can be added to the card to hold an image
    - Use a style block to be able to handle needed styling of image
    - q-card-section can be used to add a caption
    - Use text caption to add style for text
    - Use an array to hold posts -> add a data method to the script section
    - Will be using an epoch style date
        - Using the Date.now() function in the console in the browser to get the present date
    - Using a v-for directive to loop through the posts array
        - Posts are simply duplicates at this stage with different id numbers
    - A key property is also needed to help identify each item (can prevent errors eg updating the wrong post)
        - Use the post.id as a key
    - To format the Epoch date being used Quasar has in built date formatting
        - Piping not working so nicedate function preventing rendering of fomatted date
    - Quasar has a 12 point column system
        - To use simply create a row div and then column divs inside
        - These will be equal by default 
            - Specific width can be added
    - To have space between columns use a grid gutter
        - q-gutter has different classes available
    - To ensure that profile is not lost on scrolling used the fixed class
    - Mini profile should not be seen on mobile
        - Use the large screen only class
        - Post width will have to be increased (responsive)

Camera Page
    - Full-width class can be used to make an image the full width of a page
    - Using round button available at Quasar
        - The size property can be used to increase button size with various units
    - justify-center will justify rows to the centre of a div
    - Using a standard text-input (q-input standard)
    - To add a button to an input field use template tag
        - This is accompanied by a v-slot:append property and then the button field
        - This can be added to a q-input which has been changed from self closing
    - Using unelevated rounded button for submit
    - V-model error will exist until data setup on the component
        - Change from text to post.caption and post.location
    - Quasar has a utility for generating unique id's (uid)

Adding Native Functionality to Camera Page
    - Replace the image element in the camera frame div with a video element
        - This is so that user's camera feed can be streamed to the element
        - The element is changed to self-closing
    - The element should be set to full width
        - An autoplay property is added to ensure that the element is played as soon as the feed is received
    - A method will need to be added for initialising the camera
        - Using the methods object
        - This will be ran when a user goes to the camera page
        - This will be done inside a mounted hook
    - Access to the camera stream can be gotten using the get user media method
        - navigator.mediaDevices.getUserMedia
        - This will take an object with video option set to true
        - This returns a promise so will need a then block which retruns a stream
        - This can be passed to the video element via the src property
        - A ref needs to be added to the video element
        - The video element is then accessed in the then block using this.$refs
    - Not all broswers support the getUserMedia method particularly older browser
        - A polyfill will be needed to allow use on older browsers
        - In this case md-gum-polyfill
            - Simply add a requirement to the script block and it should work
    - When the user clicks the camera page button the current frame should be captured
        - This will be saved as a still image using a canvas element
    - A canvas element will have the captured frame drawn as an image on it
        - The element can be added after the video element as will need a ref and to be full-width
        - Add a click method to the button (@click)
        - Access will be needed to both video and canvas elements (Use refs)
        - Canvas dimensions will need to match video dimensions
             - Using the getBoundingClientRect method (height and width)
        - The get context method needs to be called prior to drawing on the canvas
        - The drawImage method can then be used which will take several parameters
            - The first parameter will be the current frame from the video element 
            - The second parameter is where to commence drawing ( top-left in this case = 0)
            - The third parameter will be the y co-ordinate (0)
            - The third and fourth parameters are the canvas width and height
    - Once an image is captured the video element will need to be hidden
        - Add an imageCaptured property to data and initially set to false
        - Then in the captureImage method set the property to true
        - v-show directives will then need to be added to video and canvas
        - v-show is used instead of v-if as v-if removes the element completely from the DOM
            - This will functionality not to work 
    - After the image has been captured it will need to be stored in the photo property of data
        - This has been set to null 
        - Data can be gotten as Base64 data using the toDataURL function
        - It is not good practice to store large data files, file will need to be changed to a blob file
            - BLOB -- Binary Large Object
        - A URI to BLOB function will need to be added
            - Comments in the function explain process
    - Some broswers may not support camera accessed
        - The app should still be able to function with a fallback
        - In this case image upload functionality would provide the fallback
        - Add a new property to data (hasCameraSupport : true)
        - The getUserMedia method will return an error if the user does not have camera support/access
        - There will need to be a catch block added to manage the error
            - This will set hasCameraSupport to false
        - Then add a v-if to the image capture button 
        - The capture button will disappear if capture functionality is unavailable
        - There will be a file upload component to replace the capture button 
            - Quasar site -> Components -> Form Components -> File Picker
            - Using component with clip icon attached
        - An imageUpload property will need to be added to store the uploaded image
            - This will need to be an array/filelist
            - Use the accept property to accept only image files
        - v-model will be set to imageUpload
            - Can bee seen in Vue dev tools PageCamera -> imageUpload should be set to file
    - Displaying uploaded image inside photo frame (already exists)
        - Needs to have an event input which is triggered on selection of a file
        - Add a captureImageFallback method to capture the upload image
        - Image will need to be uploaded into a HTML5 canvas
        - Change the functions to arrow functions to enable access to this keyword
        - Canvas is still hidden by default due to video element being shown first
        - Once the image has been captured set the imageCaptured property to true
    - Camera will need to be disabled after capturing image/leaving the page
        - Using image capture camera still continues to run even after leaving page
        - Add a disableCamera method

Getting User location
    - Using the JS Geolocation API
    - Getting User location co-ordinates
        - Ideally would be done by when clicking the location button
        - JS Geolocation API -- https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API
        - Add a click handler to the location button
            - This will trigger a getLocation method
            - This will use navigator.geolocation.getCurrentPosition from the API
            - This will return a position object, then add an error handler
            - Also add an object for the 3rd parameter which will have timeout property
    - Get City & Country Name
        - Latitude and Longtitude can be passed to GeoCode API to get city names
        - Using -- https://geocode.xyz/
        - The API to be used in this case is the reverse geocoding API
            - https://geocode.xyz/51.50354,-0.12768?json=1
        - Parameters from logging out can be interchanged to give current location
        - Change the console log to use getCityAndCountry method
        - Use axios to get the interpolated URL 
        - 
    -
