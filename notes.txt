Quasar Framework
    - https://quasar.dev/
    - VueJS based
    - A single codebase can be deployed to multiple platforms

Running the project
    - cd into the project folder
    - To run the project
        - At the cli enter -- quasar dev
        - By default this is ran in SPA mode
    - To run the project in PWA mode
        - quasar dev -m pwa
        - This mode will interfere with Hot Relaoding and other items
            - This is down to doing stuff like caching
        - It may be better to develop in standard SPA mode until adding PWA items

Folder Structure
    - /src folder will be the main folder that concerns
    - The index.template.html file is the main html file
    - The q-app div will be where the main Vue component will be loaded
    - MainLayout.vue in layouts folder in the main layout for the app
        - Within layouts pages are loaded
        - This will be in the <router-view />
    - The assets folder holds items such as images
        - Anything in this folder will be processed by Webpack
    - Boot files allow for code to be initialised prior to app starting
        - This can be beneficial for plugins
        - There is an axios.js boot file created by default
            - Axios will be used during the project
    - CSS folder will hold css depending on what options where chosen in setup
    - There was a /src/statics folder this has been replaced by /public folder
        - Assets can be added here to but will only be loaded not processed by Webpack

Install Vue devtools on Chrome

Vue.js should be understood prior (at least the basics) 

Drawer component
    - q-drawer can be removed from layout
    - This is because a header and footer will be added
    - Sample code for components eg footer can be gotten from the Quasar site

Adding header and footer
    - Adding tabs -> In layoput q-tab will be inside q-tabs
    - To add to Vue router change q-tab to q-route-tab 
    - Then simply add a to directive along with the path wanted
    - The footer will be for the mobile view of the app

Adding Style
    - Removing the elevated property will remove the shadow
    - Add a background colour using bg-<colour>
    - Change text colour using class text-<colour>
    - Using the component API on the Quasar site will show available properties
    - To add a border add a bordered property
    - To differentiate active tab add active-colour property to q-tabs
    - To remove line indicating active tab use the indicator-color and set to transparent

Changing Icons
    - By default Quasar uses Material Icons
    - Project will use Eva Icons
        - https://akveo.github.io/eva-icons/#/
    - Adding libraries will be done in the quasar.conf.js file
    - eva-icons should already be present
        - If not then add in the extras section
    - To use eva icons use eva-<icon name> property
    - Name props can be removed from route tabs as they are for a content pane which is not being used
    - Labels can also be removed
    - To enlargen icons sizes use q-tab__icon
        - This will mean adding a style section to the main layout file

Header Styles
    - q-button can be removed as the drawer has made it redundant
    - Quasar version number div can also be removed
    - Text can be centered using the text-center property
        - This will only work on desktops so using CSS will be better in this case
    - The q-toolbar__title property will need to be adjusted
    - This will be done using the text-align: center 

Using custom font
    -  Using Google Fonts and the Grand Hotel font
        - https://fonts.google.com/specimen/Grand+Hotel
    - Add the link to the indxe.template.html page
    - Then add a global css class to enable components to use the style

Hide footer
    - For when larger displays are used (desktop)
    - Quasar has breakpoint variables that can be used
    - xs will be used as it covers up to 599px wide which should cover all mobile devices
    - Many items will be hidden or rearranged on larger devices so global classes should be setup

Navigation items
    - Again for larger displays
    - App will use buttons (flat round in this case)
    - Dense attribute will reduce padding around an icon
    - directive order does matter and will affect rendering!!

Make header better for desktops
    - Just applies when using desktop
    - There is a separator component available for visually separating components 
        - These are both vertical and horizontal
    - Create a constrain class to prevent icons going to the far sides of a page (max-width)

Creating Page content
    - Use the constrain class to keep content centered on large screens
    - Quasar has a built in padding directive : q-pa

Create a list of posts
    - Use the q-card component (flat-bordered)
    - There are templates available on the Quasar site
    - Gravatar or other imagehosts can be used to host avatar image
    - q-img can be added to the card to hold an image
    - Use a style block to be able to handle needed styling of image
    - q-card-section can be used to add a caption
    - Use text caption to add style for text
    - Use an array to hold posts -> add a data method to the script section
    - Will be using an epoch style date
        - Using the Date.now() function in the console in the browser to get the present date
    - Using a v-for directive to loop through the posts array
        - Posts are simply duplicates at this stage with different id numbers
    - A key property is also needed to help identify each item (can prevent errors eg updating the wrong post)
        - Use the post.id as a key
    - To format the Epoch date being used Quasar has in built date formatting
        - Piping not working so nicedate function preventing rendering of fomatted date
    - Quasar has a 12 point column system
        - To use simply create a row div and then column divs inside
        - These will be equal by default 
            - Specific width can be added
    - To have space between columns use a grid gutter
        - q-gutter has different classes available
    - To ensure that profile is not lost on scrolling used the fixed class
    - Mini profile should not be seen on mobile
        - Use the large screen only class
        - Post width will have to be increased (responsive)

Camera Page
    - Full-width class can be used to make an image the full width of a page
    - Using round button available at Quasar
        - The size property can be used to increase button size with various units
    - justify-center will justify rows to the centre of a div
    - Using a standard text-input (q-input standard)
    - To add a button to an input field use template tag
        - This is accompanied by a v-slot:append property and then the button field
        - This can be added to a q-input which has been changed from self closing
    - Using unelevated rounded button for submit
    - 
